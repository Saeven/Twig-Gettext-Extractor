#!/usr/bin/env php
<?php

/**
 * Fork from umpirsky's gettext extractor.  Modified to support
 * custom trans extension that supports domains.
 * 
 *  Modification:
 *  Alexandre Lemaire <alemaire@circlical.com>
 * 
 *  Original work:
 *  (c) Саша Стаменковић <umpirsky@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Extracts translations from twig templates.
 *
 * @author Саша Стаменковић <umpirsky@gmail.com>
 */

if (file_exists($a = __DIR__.'/../../autoload.php')) {
    require_once $a;
} else {
    require_once __DIR__.'/vendor/autoload.php';
}

$twig = new Twig_Environment(new Twig\Gettext\Loader\Filesystem('/'), array(
    'cache'       => '/tmp/cache/'.uniqid(),
    'auto_reload' => true
));

$twig->addExtension(new Symfony\Bridge\Twig\Extension\TranslationExtension(
    new Symfony\Component\Translation\Translator(null)
));

$chain    = new Twig_Loader_Chain([]);
$renderer = new ZfcTwig\View\TwigRenderer(
    new Zend\View\View, 
    $chain, 
    $twig, 
    new ZfcTwig\View\TwigResolver($twig)
);

$trans    = new CirclicalTwigTrans\Model\Twig\Trans( $renderer );

$twig->addExtension( $trans );

$twig->addExtension(new Symfony\Bridge\Twig\Extension\RoutingExtension(
    new Twig\Gettext\Routing\Generator\UrlGenerator()
));
$twig->addExtension(new Symfony\Bridge\Twig\Extension\FormExtension(
    new Symfony\Bridge\Twig\Form\TwigRenderer(
        new Symfony\Bridge\Twig\Form\TwigRendererEngine()
    )
));

// You can add more extensions here.
$twig->addFunction(new \Twig_SimpleFunction('formLabel', true));
$twig->addFunction(new \Twig_SimpleFunction('formInput', true));
$twig->addFunction(new \Twig_SimpleFunction('formElementErrors', true));
$twig->addFunction(new \Twig_SimpleFunction('formCaptcha', true));
$twig->addFunction(new \Twig_SimpleFunction('formHidden', true));
$twig->addFunction(new \Twig_SimpleFunction('formSelect', true));
$twig->addFunction(new \Twig_SimpleFunction('doctype', true));
$twig->addFunction(new \Twig_SimpleFunction('headTitle', true));
$twig->addFunction(new \Twig_SimpleFunction('headMeta', true));
$twig->addFunction(new \Twig_SimpleFunction('headStyle', true));
$twig->addFunction(new \Twig_SimpleFunction('headScript', true));
$twig->addFunction(new \Twig_SimpleFunction('headLink', true));
$twig->addFunction(new \Twig_SimpleFunction('inlineScript', true));
$twig->addFunction(new \Twig_SimpleFunction('layout', true));
$twig->addFunction(new \Twig_SimpleFunction('recaptcha', true));

$setFunctions = false;
array_shift($_SERVER['argv']);
foreach ($_SERVER['argv'] as $arg)
{
    if( "--functions" == $arg )
    {
        $setFunctions = true;
    }
    else if( $setFunctions )
    {
        foreach( explode(",", $arg ) as $fn )
            $twig->addFunction(new \Twig_SimpleFunction($fn,true));
	    $setFunctions = false;
    }
}




$addTemplate = false;
$setExecutable = false;
$extractor = new Twig\Gettext\Extractor($twig);

foreach ($_SERVER['argv'] as $arg)
{
    if ('--files' == $arg)
    {
        $addTemplate = true;
    }
    else if ($addTemplate)
    {
        $extractor->addTemplate(getcwd().DIRECTORY_SEPARATOR.$arg);
    }
    else if( "--exec" == $arg )
    {
        $setExecutable = true;
    }
    else if( $setExecutable )
    {
        $extractor->setExecutable( $arg );
        $setExecutable = false;
    }
    else if( "--functions" == $arg )
    {
        $setFunctions = true;
    }
    else if( $setFunctions )
    {
	    $setFunctions = false;
    }
    else
    {
        $extractor->addGettextParameter($arg);
    }
}

$extractor->extract();
